#!/bin/zsh

# chmod +x cpp_init.sh

if [ $# -eq 0 ]; then
	echo "Usage: $0 name1 [name2 ...]"
	exit 1
fi

if [ $# -eq 1 ] && [ "${1:0:1}" = "-" ]; then
	if [ "$1" = "-config" ]; then
		mkdir -p "$HOME"
		mkdir -p "$HOME/.scripts"
		mkdir -p "$HOME/.scripts/cpp_init"
		chmod +x cpp_init.sh
		mv cpp_init.sh "$HOME/.scripts/cpp_init/cpp_init"
		echo -e "\nexport PATH=~/.scripts/cpp_init:\$PATH" >> ~/.bashrc
		echo -e "\nexport PATH=~/.scripts/cpp_init:\$PATH" >> ~/.zshrc
		cd ..
		rm -rf cpp_init
		exit 0
	elif [ "$1" = "-h" ] || [ "$1" = "-help" ]; then
		echo "Usage: $0 name1 [name2 ...]"
		exit 0
	fi
	echo "Something went wrong"
	exit 1
fi

for name in "${@:2}"; do
	if [[ ! "$name" =~ ^[[:alnum:]]+$ ]]; then
		echo "Invalid name: $name"
		exit 1
	fi
done

if [ ! -d "$1" ]; then
	mkdir -p $1
fi
main_folder="$1"
srcs_folder="$main_folder/src"
incs_folder="$main_folder/includes"

if [ ! -d "$srcs_folder" ]; then
	mkdir -p $srcs_folder
fi
if [ ! -d "$incs_folder" ]; then
	mkdir -p $incs_folder
fi

set -o shwordsplit

write_hpp() {

local name="$1"
local upper=$(echo "$name" | tr '[:lower:]' '[:upper:]')

	cat <<EOF > "$main_folder/includes/$name.hpp"
#ifndef ${upper}_HPP
# define ${upper}_HPP

# include <iostream>
# include <string>
# include <exception>

class $name
{
	private:

	public:
		$name();
		$name(const $name &copy);
		$name &operator=(const $name &copy);
		~$name();
};

#endif
EOF
}

write_cpp() {

local name="$1"

	cat <<EOF > "$main_folder/src/$name.cpp"
#include "../includes/$name.hpp"

$name::$name() {
	std::cout << "$name constructor called" << std::endl;
}

$name::$name(const $name &copy) {
	std::cout << "$name copy constructor called" << std::endl;
	// Don't forget to copy the variables here
	*this = copy;
}

$name &$name::operator=(const $name &copy) {
	std::cout << "$name copy assignment operator called" << std::endl;
	// Don't forget to copy the variables here
	return (*this);
}

$name::~$name() {
	std::cout << "$name destructor called" << std::endl;
}
EOF
}

write_Makefile() {

	cat <<EOF > "$main_folder/Makefile"
CC = c++

FLAGS = -Wall -Werror -Wextra -std=c++98

SRC = 

OBJ = \$(SRC:\$(SRC_PATH)%.cpp=\$(OBJ_PATH)%.o)

OBJ_PATH = obj/
SRC_PATH = src/

RM = rm -rf

NAME = main

all : \$(NAME)

\$(NAME):	\$(OBJ)
	\$(CC) \$(FLAGS) \$(OBJ) -o \$(NAME)

\$(OBJ): \$(OBJ_PATH)

\$(OBJ_PATH)%.o: \$(SRC_PATH)%.cpp | \$(OBJ_PATH)
	@\$(CC) \$(FLAGS) -c \$< -o \$@

\$(OBJ_PATH):
	@mkdir -p \$(OBJ_PATH)

clean:
	@\$(RM) \$(OBJ_PATH)	

fclean:	clean
	@\$(RM) \$(NAME)

re:	fclean att all
	clear

att:
	@sed -i "5s,.*,SRC = \$\$(echo src/*.cpp)," Makefile
EOF
}

write_main() {
    cat << EOF >> "$main_folder/src/main.cpp"
int main(void) {
	return (0);
}
EOF
}

write_main_includes() {
    local file="$main_folder/src/main.cpp"
    local temp_file=$(mktemp)

	echo "#include \"../includes/$name.hpp\"" >> "$temp_file"
    
	cat "$file" >> "$temp_file"

    mv "$temp_file" "$file"
}

if [ ! -f "$main_folder/src/main.cpp" ]; then
	touch "$main_folder/src/main.cpp"
	write_main
fi

for name in "${@:2}"; do

	file_inc="$main_folder/includes/$name.hpp"
	file_src="$main_folder/src/$name.cpp"
	if [ ! -f "$file_inc" ]; then
		write_hpp $name
		write_main_includes $name
	fi
	if [ ! -f "$file_src" ]; then
		write_cpp $name
	fi
done

if [ ! -f "$main_folder/Makefile" ]; then
	write_Makefile
fi

cd $main_folder
make att
cd ..

